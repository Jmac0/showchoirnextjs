import type { NextApiRequest, NextApiResponse } from "next";

import dbConnect from "@/src/lib/dbConnect";
// eslint-disable-next-line @typescript-eslint/no-var-requires
const Members = require("@/src/lib/models/member");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const constants = require("gocardless-nodejs/constants");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const gocardless = require("gocardless-nodejs");

const client = gocardless(
  process.env.GO_CARDLESS_ACCESS_TOKEN,
  constants.Environments.Sandbox
);

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  await dbConnect();
  // reject non post requests
  if (req.method !== "POST") {
    res.status(405).json({ message: "Unsupported method" });
    return;
  }

  const {
    firstName,
      lastName,
    address,
 city,
    county,
    postCode,
    email,
    phoneNumber,
    streetAddress,
    townOrCity,
    ageConfirm,
    homeChoir,
    consent,
  } = req.body;
  // check for spam .ru emails
  const pattern = /.ru$/;
  const match = email.match(pattern);

  if (match) {
    res
      .status(401)
      .json({ message: "Please use a valid UK, EU or US email address" });
    return;
  }

  const createMandateRequestURL = async () => {
    // create a billing request returns a request id string
    const { id } = await client.billingRequests.create({
      mandate_request: {
        scheme: "bacs",
      },
    });
    // add prefilled customer detail to the direct debit form
    const billingRequestFlow = await client.billingRequestFlows.create({
      /* TODO add hashed email to url */
      redirect_uri: "https://my-company.com/landing",
      exit_uri: "https://my-company.com/exit",
      prefilled_customer: {
        given_name: firstName,
        family_name: lastName,
        address_line1: address,
        city,
        region: county,
        postal_code: postCode,
        email,
      },
      /* id generated by the Gocardless aip */
      links: {
        billing_request: id,
      },
    });
    // send the billingRequestFlow object containing the redirect url for
    // the hosted signup form
    res.status(200).json(billingRequestFlow);
  };
  /* Create new customer object with all fields needed, even if blank,
   these will be populated, by the Gocardless webhook in another handler */

  const newMemberData = {
    first_name: firstName,
    last_name: lastName,
    email,
    post_code: postCode,
    phone_number: phoneNumber,
    street_address: streetAddress,
    town_city: townOrCity,
    county,
    age_confirm: ageConfirm,
    home_choir: homeChoir,
    consent,
    active_mandate: false,
    mandate: "",
    membership_type: "DD",
    go_cardless_id: "",
  };

  // this runs first adding new customer info to the database or updating
  // an existing customer
  await Members.findOneAndUpdate({ email }, newMemberData, {
    new: true,
    upsert: true,
  })
    .then((response: { _id: string }) => {
      //  if the response has the _id property, we know it has
      // been added to the db
      if (response._id) {
        return createMandateRequestURL();
      }
      return null;
    })
    .catch((err: { code: number }) => {
      // let message = 'There seems to be a problem, please
      // give us a call'; if (err.code === 11000) { message =
      // 'An account with that email already exists'; }
      // eslint-disable-next-line no-console
      console.log("DB ERROR");
      res.status(400).json({ err });
    });
}
